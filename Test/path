<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="11" skipped="2" tests="27" time="0.738" timestamp="2023-11-28T17:35:06.159073" hostname="DESKTOP-KOJOQ12"><testcase classname="test_assert_examples" name="test_uppercase" time="0.001" /><testcase classname="test_assert_examples" name="test_reversed" time="0.001" /><testcase classname="test_assert_examples" name="test_some_primes" time="0.001" /><testcase classname="test_class.TestClass" name="test_one" time="0.001" /><testcase classname="test_class.TestClass" name="test_two" time="0.001"><failure message="AssertionError: assert False&#10; +  where False = hasattr('hello', 'check')">self = &lt;test_class.TestClass object at 0x000001A36A9029F0&gt;

    def test_two(self):
        x = "hello"
&gt;       assert hasattr(x, "check")
E       AssertionError: assert False
E        +  where False = hasattr('hello', 'check')

test_class.py:10: AssertionError</failure></testcase><testcase classname="test_example" name="test_ok" time="0.001" /><testcase classname="test_example" name="test_fail" time="0.001"><failure message="assert 0">def test_fail():
&gt;       assert 0
E       assert 0

test_example.py:14: AssertionError</failure></testcase><testcase classname="test_example" name="test_error" time="0.001"><error message="failed on setup with &quot;assert 0&quot;">@pytest.fixture
    def error_fixture():
&gt;       assert 0
E       assert 0

test_example.py:6: AssertionError</error></testcase><testcase classname="test_example" name="test_skip" time="0.001"><skipped type="pytest.skip" message="skipping this test">C:\Users\User\AppData\Local\Programs\Python\Python312\Scripts\Python\test_example.py:22: skipping this test</skipped></testcase><testcase classname="test_example" name="test_xfail" time="0.001"><skipped type="pytest.xfail" message="xfailing this test" /></testcase><testcase classname="test_example" name="test_xpass" time="0.001" /><testcase classname="test_format_data" name="test_format_data_for_display" time="0.001"><failure message="NameError: name 'format_data_for_display' is not defined">example_people_data = [{'family_name': 'Ruiz', 'given_name': 'Alfonsa', 'title': 'Senior Software Engineer'}, {'family_name': 'Khan', 'given_name': 'Sayid', 'title': 'Project Manager'}]

    def test_format_data_for_display(example_people_data):
&gt;       assert format_data_for_display(example_people_data) == [
            "Alfonsa Ruiz: Senior Software Engineer",
            "Sayid Khan: Project Manager",
        ]
E       NameError: name 'format_data_for_display' is not defined

test_format_data.py:21: NameError</failure></testcase><testcase classname="test_format_data" name="test_format_data_for_excel" time="0.001"><failure message="NameError: name 'format_data_for_excel' is not defined">example_people_data = [{'family_name': 'Ruiz', 'given_name': 'Alfonsa', 'title': 'Senior Software Engineer'}, {'family_name': 'Khan', 'given_name': 'Sayid', 'title': 'Project Manager'}]

    def test_format_data_for_excel(example_people_data):
&gt;       assert format_data_for_excel(example_people_data) == """given,family,title
    Alfonsa,Ruiz,Senior Software Engineer
    Sayid,Khan,Project Manager
    """
E       NameError: name 'format_data_for_excel' is not defined

test_format_data.py:28: NameError</failure></testcase><testcase classname="test_maybe_palindrome" name="test_is_palindrome[-True]" time="0.001" /><testcase classname="test_maybe_palindrome" name="test_is_palindrome[a-True]" time="0.002" /><testcase classname="test_maybe_palindrome" name="test_is_palindrome[Bob-True]" time="0.002"><failure message="AssertionError: assert False == True&#10; +  where False = is_palindrome('Bob')">maybe_palindrome = 'Bob', expected_result = True

    @pytest.mark.parametrize("maybe_palindrome, expected_result", [
        ("", True),
        ("a", True),
        ("Bob", True),
        ("Never odd or even", True),
        ("Do geese see God?", True),
        ("abc", False),
        ("abab", False),
    ])
    def test_is_palindrome(maybe_palindrome, expected_result):
&gt;       assert is_palindrome(maybe_palindrome) == expected_result
E       AssertionError: assert False == True
E        +  where False = is_palindrome('Bob')

test_maybe_palindrome.py:16: AssertionError</failure></testcase><testcase classname="test_maybe_palindrome" name="test_is_palindrome[Never odd or even-True]" time="0.001"><failure message="AssertionError: assert False == True&#10; +  where False = is_palindrome('Never odd or even')">maybe_palindrome = 'Never odd or even', expected_result = True

    @pytest.mark.parametrize("maybe_palindrome, expected_result", [
        ("", True),
        ("a", True),
        ("Bob", True),
        ("Never odd or even", True),
        ("Do geese see God?", True),
        ("abc", False),
        ("abab", False),
    ])
    def test_is_palindrome(maybe_palindrome, expected_result):
&gt;       assert is_palindrome(maybe_palindrome) == expected_result
E       AssertionError: assert False == True
E        +  where False = is_palindrome('Never odd or even')

test_maybe_palindrome.py:16: AssertionError</failure></testcase><testcase classname="test_maybe_palindrome" name="test_is_palindrome[Do geese see God?-True]" time="0.001"><failure message="AssertionError: assert False == True&#10; +  where False = is_palindrome('Do geese see God?')">maybe_palindrome = 'Do geese see God?', expected_result = True

    @pytest.mark.parametrize("maybe_palindrome, expected_result", [
        ("", True),
        ("a", True),
        ("Bob", True),
        ("Never odd or even", True),
        ("Do geese see God?", True),
        ("abc", False),
        ("abab", False),
    ])
    def test_is_palindrome(maybe_palindrome, expected_result):
&gt;       assert is_palindrome(maybe_palindrome) == expected_result
E       AssertionError: assert False == True
E        +  where False = is_palindrome('Do geese see God?')

test_maybe_palindrome.py:16: AssertionError</failure></testcase><testcase classname="test_maybe_palindrome" name="test_is_palindrome[abc-False]" time="0.002" /><testcase classname="test_maybe_palindrome" name="test_is_palindrome[abab-False]" time="0.001" /><testcase classname="test_sample" name="test_answer" time="0.001"><failure message="assert 4 == 5&#10; +  where 4 = func(3)">def test_answer():
&gt;       assert func(3) == 5
E       assert 4 == 5
E        +  where 4 = func(3)

test_sample.py:7: AssertionError</failure></testcase><testcase classname="test_sysexit" name="test_mytest" time="0.003" /><testcase classname="test_tmpdir" name="test_needsfiles" time="0.014"><failure message="assert 0">tmpdir = local('C:\\Users\\User\\AppData\\Local\\Temp\\pytest-of-User\\pytest-3\\test_needsfiles0')

    def test_needsfiles(tmpdir):
        print(tmpdir)
&gt;       assert 0
E       assert 0

test_tmpdir.py:5: AssertionError</failure></testcase><testcase classname="test_with_pytest" name="test_always_passes" time="0.001" /><testcase classname="test_with_pytest" name="test_always_fails" time="0.001"><failure message="assert False">def test_always_fails():
&gt;       assert False
E       assert False

test_with_pytest.py:7: AssertionError</failure></testcase><testcase classname="test_with_unittest.TryTesting" name="test_always_fails" time="0.001"><failure message="AssertionError: False is not true">self = &lt;test_with_unittest.TryTesting testMethod=test_always_fails&gt;

    def test_always_fails(self):
&gt;       self.assertTrue(False)
E       AssertionError: False is not true

test_with_unittest.py:10: AssertionError</failure></testcase><testcase classname="test_with_unittest.TryTesting" name="test_always_passes" time="0.001" /></testsuite></testsuites>